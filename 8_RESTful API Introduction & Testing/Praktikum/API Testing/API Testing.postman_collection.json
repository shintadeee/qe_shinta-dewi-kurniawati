{
	"info": {
		"_postman_id": "49237b40-a2ab-439b-87db-2ab1de8d0315",
		"name": "API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26418197"
	},
	"item": [
		{
			"name": "Positive Case",
			"item": [
				{
					"name": "Get List All Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Set up request\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has correct number of elements\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Set request body\r",
									"let requestBody = {\r",
									"    title: \"Test Post\",\r",
									"    body: \"This is a test post\",\r",
									"    userId: 1\r",
									"};\r",
									"\r",
									"// Send POST request to server\r",
									"pm.sendRequest({\r",
									"    url: 'https://jsonplaceholder.typicode.com/posts',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestBody)\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    // Verify response status code is 201 Created\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.expect(response.code).to.equal(201);\r",
									"    });\r",
									"\r",
									"    // Verify response body contains title, body, and userId\r",
									"    pm.test(\"Response body has required fields\", function () {\r",
									"        let responseBody = response.json();\r",
									"        pm.expect(responseBody.title).to.equal(\"Test Post\");\r",
									"        pm.expect(responseBody.body).to.equal(\"This is a test post\");\r",
									"        pm.expect(responseBody.userId).to.equal(1);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Data ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(1);\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.title).to.eql(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
									"    pm.expect(jsonData.body).to.eql(\"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change List Data ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.eql(1);\r",
									"    pm.expect(pm.response.json().id).to.eql(1);\r",
									"    pm.expect(pm.response.json().title).to.eql(\"Updated Title\");\r",
									"    pm.expect(pm.response.json().body).to.eql(\"Updated Body\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"id\": 1,\r\n    \"title\": \"Updated Title\",\r\n    \"body\": \"Updated Body\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List Data ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be an empty object\", function () {\r",
									"    pm.response.to.have.jsonBody({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1?id=1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Case",
			"item": [
				{
					"name": "Get List All Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"https://jsonplaceholder.typicode.com/posts\",\r",
									"    method: \"GET\"\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"        return;\r",
									"    }\r",
									"    console.log(res.json());\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response body is an array\", function () {\r",
									"        pm.expect(pm.response.json()).to.be.an('array');\r",
									"    });\r",
									"    pm.test(\"Response body has correct number of elements\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.length).to.eql(100);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts.",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts."
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Set request body\r",
									"let requestBody = {\r",
									"    body: \"This is a test post\",\r",
									"    userId: 1\r",
									"};\r",
									"\r",
									"// Send POST request to server\r",
									"pm.sendRequest({\r",
									"    url: 'https://jsonplaceholder.typicode.com/posts',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestBody)\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    // Verify response status code is 400 Bad Request\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(response.code).to.equal(400);\r",
									"    });\r",
									"\r",
									"    // Verify response body contains error message\r",
									"    pm.test(\"Response body contains error message\", function () {\r",
									"        let responseBody = response.json();\r",
									"        pm.expect(responseBody.error).to.equal(\"Title is required\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Data ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404 for invalid ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct for invalid ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/999",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change List Data ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    pm.expect(pm.response.json().error).to.eql(\"Post not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List Data ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is not 404 Not Found\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should be an object with an error message\", function () {\r",
									"    pm.response.to.have.jsonBody({message: \"Resource not found\"});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}